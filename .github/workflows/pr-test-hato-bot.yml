---
name: pr-test-hato-bot

# pull_requestで何かあった時に起動する
on:
  pull_request:
  push:
    branches:
      - master
      - develop

jobs:
  # unittestを行う
  # testが落ちたらチェックが落ちる
  pr-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - run: echo "PYTHON_VERSION=$(cat .python-version)" >> "${GITHUB_ENV}"
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pipenv
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            PATTERN="${package_name}[^ ]+"
            package_name_with_version=$(grep -oE "${PATTERN}" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev
      - name: Set .env
        run: |
          cp .env.example .env
      - name: Test
        run: |
          pipenv run python -m unittest

  pr-docker:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: setup
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set .env
        run: cp .env.example .env
        working-directory: .
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker-compose pull
      - name: Start docker
        run: docker-compose up -d
      # Dockerコンテナ立ち上げから2分以内に疎通できるようになるかテストする
      - name: Test
        run: |
          cmd="curl -XPOST -d '{\"message\": \"help\"}'"
          cmd+=" -H \"Content-Type: application/json\""
          cmd+=" http://localhost:3000/healthcheck"
          cmd_="${cmd} -w '%{http_code}' -o /dev/null -s"
          start_unixtime=$(date +%s)

          while [ "$(echo "$(date +%s) - ${start_unixtime}" | bc)" -lt 120 ] \
                && (! (docker-compose ps | grep -q Exit))
          do
            if [ "$(eval "${cmd_}")" = 200 ] && eval "${cmd}"
            then
              docker-compose logs
              exit 0
            fi

            sleep 1
          done

          docker-compose logs
          exit 1
