---
name: deploy-hato-bot

on:
  release:
    types:
      - published
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
  push:
    branches:
      - master
      - develop

jobs:
  deploy_docker_image:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      REPOSITORY: ${{github.repository}}
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'release' || (github.event_name == 'pull_request' && github.event.action != 'closed' && github.repository == github.event.pull_request.head.repo.full_name)
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
      - name: Set .env
        run: cp .env.example .env
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.2.1
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=${{ github.event.release.tag_name }}' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'release' }}
      - name: Build and push (build)
        uses: docker/bake-action@v2.3.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: build.docker-compose.yml
      - name: Build and push (main)
        uses: docker/bake-action@v2.3.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml
      - name: Build and push (dev)
        uses: docker/bake-action@v2.3.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml,dev.docker-compose.yml
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'release' }}
      - name: Build and push (build) (latest)
        uses: docker/bake-action@v2.3.0
        if: ${{ github.event_name == 'release' }}
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: build.docker-compose.yml
      - name: Build and push (main) (latest)
        uses: docker/bake-action@v2.3.0
        if: ${{ github.event_name == 'release' }}
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml
      - name: Build and push (dev) (latest)
        uses: docker/bake-action@v2.3.0
        if: ${{ github.event_name == 'release' }}
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml,dev.docker-compose.yml
      - name: Start docker
        env:
          DOCKER_CONTENT_TRUST: 1
        run: docker compose up -d --wait
      # Dockerコンテナに疎通できるかテストする
      - name: Test
        run: curl http://localhost:3000/status

  # .python-version をDockerイメージと同期させる
  update-version-python-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      DOCKER_CONTENT_TRUST: 1
      REPOSITORY: ${{github.repository}}
    needs: deploy_docker_image
    if: always() && (needs.deploy_docker_image.result == 'success' || (github.event_name == 'pull_request' && github.event.action == 'closed'))
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set .env
        run: cp .env.example .env
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: docker compose pull
      - name: Get Python version
        id: get_python_version
        run: bash "${GITHUB_WORKSPACE}/scripts/deploy_hato_bot/update_version_python_version/get_python_version.sh"
      - name: Update versions
        env:
          PYTHON_VERSION: ${{steps.get_python_version.outputs.python_version}}
        run: echo "${PYTHON_VERSION}" > .python-version
      - uses: dev-hato/actions-diff-pr-management@v1.0.8
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: fix-version-python-version
          pr-title-prefix: .python-versionを直してあげたよ！
          repo-name: dev-hato/hato-bot

  update-dockle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: dev-hato/actions-update-dockle@v0.0.27
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          repo-name: dev-hato/hato-bot

  dockle:
    runs-on: ubuntu-latest
    needs:
      - update-dockle
      - deploy_docker_image
    env:
      DOCKER_CONTENT_TRUST: 1
      REPOSITORY: ${{github.repository}}
    steps:
      - uses: actions/checkout@v3.1.0
      - name: Set .env
        run: cp .env.example .env
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: bash "${GITHUB_WORKSPACE}/scripts/deploy_hato_bot/dockle/install_dockle.sh"
      - run: docker compose pull
      - run: docker compose up -d
      - run: bash "${GITHUB_WORKSPACE}/scripts/deploy_hato_bot/dockle/run_dockle.sh"

  deploy-complete:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - update-version-python-version
      - update-dockle
      - dockle
    steps:
      - if: needs.update-dockle.result == 'success' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.repository != github.event.pull_request.head.repo.full_name) || (needs.update-version-python-version.result == 'success' && (github.event.action == 'closed' || needs.dockle.result == 'success')))
        run: exit 0
      - if: ${{ !(needs.update-dockle.result == 'success' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.repository != github.event.pull_request.head.repo.full_name) || (needs.update-version-python-version.result == 'success' && (github.event.action == 'closed' || needs.dockle.result == 'success')))) }}
        run: exit 1

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true
