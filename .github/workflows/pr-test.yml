---
name: pr-test

on:
  pull_request:
  push:
    branches:
      - master
      - develop

env:
  WORKON_HOME: /tmp/.venv

jobs:
  pr-super-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.2
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          KEY="${{ hashFiles('./.github/workflows/pr-test.yml') }}"
          KEY+="-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile"
          KEY+="-${{ hashFiles('./Dockerfile') }}-pipenv"
          echo "KEY=${KEY}" >> "${GITHUB_ENV}"
      - name: pipenv cache
        uses: actions/cache@v2.1.7
        with:
          key: ${{ env.KEY }}-${{ hashFiles('./Pipfile') }}
          path: ${{ env.WORKON_HOME }}
          restore-keys: |
            ${{ env.KEY }}-${{ hashFiles('./Pipfile') }}
            ${{ env.KEY }}-
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_v=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_v=${package_name}
          fi

          pip install ${package_name_v}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev

        # pipenvの仕様で、project直下の.venvの場合は .venv/lib/... にインストールされるが、
        # WORKON_HOMEを設定してインストール先をずらした場合は
        # .venv/hato-bot-(hash)/lib/... にインストールされる。
        # 参考URL: https://bit.ly/2CnKOtJ
        #
        # ${GITHUB_REPOSITORY##*/}
        # GITHUB_REPOSITORYは dev-hato/hato-bot のように入るので、
        # シェル芸で hato-bot のみ取り出している。
        # 他に持っていっても使えるようにした。
        # 参考URL: https://bit.ly/2PP4IRt
        #
        # log出力のためにfindコマンド単体も置いている
        #
        # 環境ファイルを使ってenvにsetしている
        # 参考URL: https://bit.ly/2KJhjqk
      - name: Set venv_path
        run: |
          NAME="${GITHUB_REPOSITORY##*/}-*"
          venv_path=$(find ${{ env.WORKON_HOME }} -name "${NAME}")
          echo "${venv_path}"
          echo "venv_path=${venv_path}" >> "${GITHUB_ENV}"

        # https://github.com/github/super-linter/issues/157#issuecomment-648850330
        # -v "/home/runner/work/_temp/_github_workflow":"/github/workflow"
        # ここに cp -r することで、super-linterのなかに.venvを配置できる
        # また、元ディレクトリにも残っているので、キャッシュが作られる
      - name: Move the dependencies
        run: |
          DEST_PATH="/home/runner/work/_temp/_github_workflow/.venv"
          cp -r ${{ env.venv_path }} "${DEST_PATH}"

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.5.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - name: Install dependencies
        run: |
          yarn install -D
      - run: |
          PYTHONPATH="/github/workspace/"
          PYTHONPATH+=":/github/workflow/.venv/lib/"
          PYTHONPATH+="python${{ matrix.python-version }}/site-packages"
          echo "PYTHONPATH=${PYTHONPATH}" >> "${GITHUB_ENV}"
      - name: Lint files
        uses: github/super-linter@v4.8.7
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_JSCPD: false
          VALIDATE_PYTHON_ISORT: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKON_HOME: ""
          PYTHONPATH: ${{ env.PYTHONPATH }}
          PATH: /github/workspace/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/node_modules/.bin:/venvs/ansible-lint/bin:/venvs/black/bin:/venvs/cfn-lint/bin:/venvs/cpplint/bin:/venvs/flake8/bin:/venvs/isort/bin:/venvs/mypy/bin:/venvs/pylint/bin:/venvs/snakefmt/bin:/venvs/snakemake/bin:/venvs/sqlfluff/bin:/venvs/yamllint/bin:/venvs/yq/bin:/var/cache/dotnet/tools:/usr/share/dotnet
