name: pr-test

# pull_request„Åß‰Ωï„Åã„ÅÇ„Å£„ÅüÊôÇ„Å´Ëµ∑Âãï„Åô„Çã
on:
  pull_request:

env:
  WORKON_HOME: /tmp/.venv

jobs:
  # PR„ÅåÊù•„Åü„Çâformat„Çí„Åã„Åë„Å¶„Åø„Å¶„ÄÅÂ∑ÆÂàÜ„Åå„ÅÇ„Çå„Å∞PR„Çí‰Ωú„Å£„Å¶„ÄÅ„Ç®„É©„Éº„ÅßËêΩ„Å°„Çãjob
  pr-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
        with:
          # „Åì„Åì„ÅßsubmoduleÊåÅ„Å£„Å¶„Åè„Çã„Å®detached head„Å´commit„Åó„Å¶Ê≠ª„Å¨
          # submodule: 'recursive'
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: pipenv cache
        uses: actions/cache@v2.1.5
        with:
          key: ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
          path: ${{ env.WORKON_HOME }}
          restore-keys: |
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_with_version=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev
      # autopep8„Åßformat„Åô„Çã
      # --exit-code„Çí„Å§„Åë„Çã„Åì„Å®„Åß„ÄÅautopep8ÂÜÖ„Åß„Ç®„É©„Éº„ÅåËµ∑„Åç„Çå„Å∞1„ÄÅÂ∑ÆÂàÜ„Åå„ÅÇ„Çå„Å∞2„ÅÆ„Ç®„É©„Éº„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ„ÅåËøî„Å£„Å¶„Åè„Çã„ÄÇÊ≠£Â∏∏ÊôÇ„ÅØ0„ÅåËøî„Çã
      - name: Format files
        id: format
        run: |
          pipenv run autopep8 --exit-code --in-place --recursive .
        continue-on-error: true
      # Â∑ÆÂàÜ„Åå„ÅÇ„Å£„Åü„Å®„Åç„ÅØÂ∑ÆÂàÜ„ÇíÂá∫Âäõ„Åô„Çã
      - name: Show diff
        if: steps.format.outcome == 'failure'
        run: |
          git diff
      # Â∑ÆÂàÜ„Åå„ÅÇ„Å£„Åü„Å®„Åç„ÅØ„ÄÅ„Ç≥„Éü„ÉÉ„Éà„Çí‰Ωú„Çäpush„Åô„Çã
      - name: Push
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure'
        run: |
          git config user.name "hatohakaraage"
          git config user.email "hatohakaraage@example.com"
          git add -u
          git commit -m "È≥©„ÅØÂîêÊèö„ÅíÔºÅ(Ëá™Âãï„ÅßÁõ¥„Åó„Å¶„ÅÇ„Åí„Åü„ÇàÔºÅ)"
          git push -f https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:refs/heads/fix-format-${{github.event.pull_request.head.ref}}
      # push„Åó„Åü„Éñ„É©„É≥„ÉÅ„ÅßPR„Çí‰Ωú„Çã
      - name: Create PullRequest
        uses: actions/github-script@v4.0.2
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pull_params = {
              head: "dev-hato:fix-format-${{github.event.pull_request.head.ref}}",
              base: "${{github.event.pull_request.head.ref}}",
              ...common_params
            }
            const pulls_list_params = {
              state: "open",
              ...pull_params
            }
            console.log("call pulls.list:")
            console.log(pulls_list_params)
            github.pulls.list(pulls_list_params).then(list_res => {
              if (list_res.data.length === 0) {
                const pulls_create_params = {
                  title: "format„ÅåÈñìÈÅï„Å£„Å¶„Åü„ÅÆ„ÅßÁõ¥„Åó„Å¶„ÅÇ„Åí„Åü„ÇàÔºÅPR„Çí„Éû„Éº„Ç∏„Åó„Å¶„Å≠ÔºÅ #${{github.event.pull_request.number}}",
                  body: "È≥©„ÅÆÂîêÊèö„Åí„Åä„ÅÑ„Åó„ÅÑÔºÅüòãüòãüòã #${{github.event.pull_request.number}}",
                  ...pull_params
                }
                console.log("call pulls.create:")
                console.log(pulls_create_params)
                github.pulls.create(pulls_create_params).then(create_res => {
                  if("${{github.event.pull_request.user.login}}" !== "dependabot[bot]") {
                    const issues_add_assignees_params = {
                      issue_number: create_res.data.number,
                      assignees: ["${{github.event.pull_request.user.login}}"],
                      ...common_params
                    }
                    console.log("call issues.addAssignees:")
                    console.log(issues_add_assignees_params)
                    github.issues.addAssignees(issues_add_assignees_params)
                  }
                })
              }
            })
      # Êó¢„Å´format‰øÆÊ≠£„ÅÆPR„Åå„ÅÇ„ÇãÁä∂ÊÖã„Åß„ÄÅÊâãÂãï„Åßformat„Çí‰øÆÊ≠£„Åó„ÅüÂ†¥Âêà„ÄÅformat‰øÆÊ≠£„ÅÆPR„ÇíÈñâ„Åò„Çã
      - name: Close PullRequest
        uses: actions/github-script@v4.0.2
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome != 'failure'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const head_name = "fix-format-${{github.event.pull_request.head.ref}}"
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "dev-hato:" + head_name,
              base: "${{github.event.pull_request.head.ref}}",
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:")
            console.log(pulls_list_params)
            github.pulls.list(pulls_list_params).then(res => {
              for(const data of res.data){
                const pulls_update_params = {
                  pull_number: data.number,
                  state: "closed",
                  ...common_params
                }
                console.log("call pulls.update:")
                console.log(pulls_update_params)
                github.pulls.update(pulls_update_params).then(res2 => {
                  const git_deleteRef_params = {
                    ref: "heads/" + head_name,
                    ...common_params
                  }
                  console.log("call git.deleteRef:")
                  console.log(git_deleteRef_params)
                  github.git.deleteRef(git_deleteRef_params)
                })
              }
            })
      - name: Exit
        if: steps.format.outcome == 'failure'
        run: exit 1

  # Âûã„Éí„É≥„Éà„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíË°å„ÅÜ
  pr-type-hint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.7]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: pipenv cache
        uses: actions/cache@v2.1.5
        with:
          key: ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
          path: ${{ env.WORKON_HOME }}
          restore-keys: |
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_with_version=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev
      - name: Check type hints
        run: |
          pipenv run mypy .

  # lint„ÇíË°å„ÅÑ„ÄÅÁµêÊûú„ÇíPR„Å´„Ç≥„É°„É≥„Éà„Å®„Åó„Å¶Ë°®Á§∫„Åô„Çã„ÄÇ
  # „Åì„Åì„Åß„ÅØ„ÉÅ„Çß„ÉÉ„ÇØ„ÅØËêΩ„Å°„Å™„ÅÑ
  pr-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: pipenv cache
        uses: actions/cache@v2.1.5
        with:
          key: ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
          path: ${{ env.WORKON_HOME }}
          restore-keys: |
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_with_version=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev
      # lint„Åô„Çã
      - name: Lint files
        id: lint
        run: |
          result=$(pipenv run pylint --rcfile=.github/linters/.python-lint $(find . -iname "*.py") 2>&1) || true
          echo "$result"
          result="${result//'%'/'%25'}"
          result="${result//$'\n'/'%0A'}"
          result="${result//$'\r'/'%0D'}"
          echo "::set-output name=result::$result"
          true
        continue-on-error: true
      # lintÁµêÊûú„Çí„Ç≥„É°„É≥„Éà„Å´ÊÆã„Åô
      - name: Lint Comment
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.lint.outputs.result != ''
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issues_listComments_params = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            console.log("call issues.listComments:")
            console.log(issues_listComments_params)
            github.issues.listComments(issues_listComments_params).then(response =>
              response.data.filter(
                comment=>comment.user.id==41898282 && comment.body.startsWith('LintÁµêÊûú')
              ).map(
                comment=>comment.id
              ).forEach(
                comment_id => {
                  const issues_deleteComment_params = {
                    comment_id: comment_id,
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  }
                  console.log("call issues.deleteComment:")
                  console.log(issues_deleteComment_params)
                  github.issues.deleteComment(issues_deleteComment_params)
                }
              )
            )

            const result = `${{steps.lint.outputs.result}}`
            const issues_createComment_params = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "LintÁµêÊûú„Å†„ÇàÔºÅüïäüïäüïä\n```\n"+result+"\n```"
            }
            console.log("call issues.createComment:")
            console.log(issues_createComment_params)
            github.issues.createComment(issues_createComment_params)
      - name: Exit
        if: github.event.pull_request.head.repo.full_name != github.repository && !contains(steps.lint.outputs.result, 'Your code has been rated at 10.00/10')
        run: exit 1

  pr-super-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: pipenv cache
        uses: actions/cache@v2.1.5
        with:
          key: ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
          path: ${{ env.WORKON_HOME }}
          restore-keys: |
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_with_version=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev

        # pipenv„ÅÆ‰ªïÊßò„Åß„ÄÅprojectÁõ¥‰∏ã„ÅÆ.venv„ÅÆÂ†¥Âêà„ÅØ .venv/lib/... „Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Çã„Åå„ÄÅ
        # WORKON_HOME„ÇíË®≠ÂÆö„Åó„Å¶„Ç§„É≥„Çπ„Éà„Éº„É´ÂÖà„Çí„Åö„Çâ„Åó„ÅüÂ†¥Âêà„ÅØ .venv/hato-bot-(hash)/lib/... „Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Çã„ÄÇ
        # ÂèÇËÄÉURL: https://bit.ly/2CnKOtJ
        #
        # ${GITHUB_REPOSITORY##*/}
        # GITHUB_REPOSITORY„ÅØ dev-hato/hato-bot „ÅÆ„Çà„ÅÜ„Å´ÂÖ•„Çã„ÅÆ„Åß„ÄÅ„Ç∑„Çß„É´Ëä∏„Åß hato-bot „ÅÆ„ÅøÂèñ„ÇäÂá∫„Åó„Å¶„ÅÑ„Çã„ÄÇ
        # ‰ªñ„Å´ÊåÅ„Å£„Å¶„ÅÑ„Å£„Å¶„ÇÇ‰Ωø„Åà„Çã„Çà„ÅÜ„Å´„Åó„Åü„ÄÇ
        # ÂèÇËÄÉURL: https://bit.ly/2PP4IRt
        #
        # logÂá∫Âäõ„ÅÆ„Åü„ÇÅ„Å´find„Ç≥„Éû„É≥„ÉâÂçò‰Ωì„ÇÇÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã
        #
        # Áí∞Â¢É„Éï„Ç°„Ç§„É´„Çí‰Ωø„Å£„Å¶env„Å´set„Åó„Å¶„ÅÑ„Çã
        # ÂèÇËÄÉURL: https://bit.ly/2KJhjqk
      - name: Set venv_path
        run: |
          venv_path=$(find ${{ env.WORKON_HOME }} -name "${GITHUB_REPOSITORY##*/}-*")
          echo "${venv_path}"
          echo "venv_path=${venv_path}" >> $GITHUB_ENV

        # https://github.com/github/super-linter/issues/157#issuecomment-648850330
        # -v "/home/runner/work/_temp/_github_workflow":"/github/workflow"
        # „Åì„Åì„Å´ cp -r „Åô„Çã„Åì„Å®„Åß„ÄÅsuper-linter„ÅÆ„Å™„Åã„Å´.venv„ÇíÈÖçÁΩÆ„Åß„Åç„Çã
        # „Åæ„Åü„ÄÅÂÖÉ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„ÇÇÊÆã„Å£„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅ„Ç≠„É£„ÉÉ„Ç∑„É•„Åå‰Ωú„Çâ„Çå„Çã
      - name: Move the dependencies
        run: cp -r ${{ env.venv_path }} /home/runner/work/_temp/_github_workflow/.venv

      - name: Lint files
        uses: docker://github/super-linter:v3.15.5
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_JSCPD: false
          VALIDATE_PYTHON_ISORT: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKON_HOME: ""
          PYTHONPATH: "/github/workspace/:\
            /github/workflow/.venv/lib/python${{ matrix.python-version }}/site-packages"
