name: pr-test

# pull_requestで何かあった時に起動する
on:
  pull_request:

jobs:
  # PRが来たらformatをかけてみて、差分があればPRを作って、エラーで落ちるjob
  pr-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          # ここでsubmodule持ってくるとdetached headにcommitして死ぬ
          # submodule: 'recursive'
          fetch-depth: 0
      - name: pipenv cache
        uses: actions/cache@v1
        with:
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          path: ~/.cache/pipenv
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
      - name: pip cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      # autopep8でformatする
      # --exit-codeをつけることで、autopep8内でエラーが起きれば1、差分があれば2のエラーステータスコードが返ってくる。正常時は0が返る
      - name: Format files
        id: format
        run: |
          pipenv run autopep8 --exit-code --in-place --recursive .
        continue-on-error: true
      # 差分があったときは差分を出力する
      - name: Show diff
        if: steps.format.outcome == 'failure'
        run: |
          git diff
      # 差分があったときは、コミットを作りpushする
      - name: Push
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure'
        run: |
          git config user.name "hatohakaraage"
          git config user.email "hatohakaraage@example.com"
          git add -u
          git commit -m "鳩は唐揚げ！(自動で直してあげたよ！)"
          git push -f https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:refs/heads/fix-format-${{github.event.pull_request.head.ref}}
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@0.9.0
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "refs/heads/fix-format-${{github.event.pull_request.head.ref}}",
              base: "${{github.event.pull_request.head.ref}}"
            }
            github.pulls.list({
              state: "open",
              ...common_params
            }).then(res => {
              if (res.data.length === 0) {
                github.pulls.create({
                  title: "formatが間違ってたので直してあげたよ！PRをマージしてね！ #${{github.event.pull_request.number}}",
                  body: "鳩の唐揚げおいしい！😋😋😋 #${{github.event.pull_request.number}}",
                  ...common_params
                })
              }
            })
      # 既にformat修正のPRがある状態で、手動でformatを修正した場合、format修正のPRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@0.9.0
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome != 'failure'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const ref = "heads/fix-format-${{github.event.pull_request.head.ref}}"
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            github.pulls.list({
              head: "refs/" + ref,
              base: "${{github.event.pull_request.head.ref}}",
              state: "open",
              ...common_params
            }).then(res => {
              for(const data of res.data){
                github.pulls.update({
                  pull_number: data.number,
                  state: "closed",
                  ...common_params
                }).then(res2 => {
                  github.git.deleteRef({
                    ref: ref,
                    ...common_params
                  })
                })
              }
            })
      - name: Exit
        if: steps.format.outcome == 'failure'
        run: exit 1

  # unittestを行う
  # testが落ちたらチェックが落ちる
  pr-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.7]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: pipenv cache
        uses: actions/cache@v1
        with:
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          path: ~/.cache/pipenv
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
      - name: pip cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Set .env
        run: |
          cp .env.example .env
      - name: Test
        run: |
          pipenv run python -m unittest

  # 型ヒントのチェックを行う
  pr-type-hint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.7]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: pipenv cache
        uses: actions/cache@v1
        with:
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          path: ~/.cache/pipenv
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
      - name: pip cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Check type hints
        run: |
          pipenv run mypy .

  # lintを行い、結果をPRにコメントとして表示する。
  # ここではチェックは落ちない
  pr-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: pipenv cache
        uses: actions/cache@v1
        with:
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          path: ~/.cache/pipenv
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
      - name: pip cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      # lintする
      - name: Lint files
        id: lint
        run: |
          result=$(pipenv run pylint --rcfile=.github/linters/.python-lint $(find . -iname "*.py") 2>&1) || true
          echo "$result"
          result="${result//'%'/'%25'}"
          result="${result//$'\n'/'%0A'}"
          result="${result//$'\r'/'%0D'}"
          echo "::set-output name=result::$result"
          true
        continue-on-error: true
      # lint結果をコメントに残す
      - name: Lint Comment
        if: github.event.pull_request.head.repo.full_name == github.repository && steps.lint.outputs.result != ''
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            }).filter(
              comment=>comment.user.id==41898282
            ).map(
              comment=>comment.id
            ).foreach(
              comment_id =>
                github.issues.deleteComment({
                  comment_id: comment_id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
            )
    
            const result = `${{steps.lint.outputs.result}}`
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Lint結果だよ！🕊🕊🕊\n```\n"+result+"\n```"
            })
      - name: Exit
        if: github.event.pull_request.head.repo.full_name != github.repository && !contains(steps.lint.outputs.result, 'Your code has been rated at 10.00/10')
        run: exit 1

  hadolint:
    name: runner / hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: hadolint
        uses: reviewdog/action-hadolint@v1
        with:
          level: warning
          filter_mode: nofilter

  pr-super-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Lint files
        uses: docker://github/super-linter:v2.1.0
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON: false
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_MD: true
          VALIDATE_DOCKER: true
          VALIDATE_ENV: true
