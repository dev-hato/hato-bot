name: pr-test

# pull_requestで何かあった時に起動する
on:
  pull_request:

env:
  WORKON_HOME: /tmp/.venv

jobs:
  # PRが来たらformatをかけてみて、差分があればPRを作って、エラーで落ちるjob
  pr-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
        with:
          # ここでsubmodule持ってくるとdetached headにcommitして死ぬ
          # submodule: 'recursive'
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{ matrix.python-version }}
      - name: pipenv cache
        uses: actions/cache@v2.1.7
        with:
          key: ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv-${{ hashFiles('./Pipfile') }}
          path: ${{ env.WORKON_HOME }}
          restore-keys: |
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv-${{ hashFiles('./Pipfile') }}
            ${{ hashFiles('./.github/workflows/pr-test.yml') }}-${{ runner.os }}-${{ matrix.python-version }}-Dockerfile-${{ hashFiles('./Dockerfile') }}-pipenv-
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_with_version=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev
      # autopep8でformatする
      # --exit-codeをつけることで、autopep8内でエラーが起きれば1、差分があれば2のエラーステータスコードが返ってくる。正常時は0が返る
      - name: Format files
        id: format
        run: |
          pipenv run autopep8 --exit-code --in-place --recursive .
        continue-on-error: true
      # 差分があったときは差分を出力する
      - name: Show diff
        if: ${{ steps.format.outcome == 'failure' }}
        run: |
          git diff
      # 差分があったときは、コミットを作りpushする
      - name: Push
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -u
          git commit -m "鳩は唐揚げ！(自動で直してあげたよ！)"
          git push -f https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git "HEAD:refs/heads/fix-format-${HEAD_REF}"
      - name: Get PullRequests
        uses: actions/github-script@v5
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure' }}
        id: get_pull_requests
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const pulls_list_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "dev-hato:fix-format-" + HEAD_REF,
              base: HEAD_REF,
              state: "open"
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list, pulls_list_params)
            return pulls.length
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@v5
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure' && steps.get_pull_requests.outputs.result == 0 }}
        id: create_pull_request
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const pulls_create_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "dev-hato:fix-format-" + HEAD_REF,
              base: HEAD_REF,
              title: "formatが間違ってたので直してあげたよ！PRをマージしてね！ #${{github.event.pull_request.number}}",
              body: "鳩の唐揚げおいしい！😋😋😋 #${{github.event.pull_request.number}}"
            }
            console.log("call pulls.create:", pulls_create_params)
            const create_pull_res = (await github.rest.pulls.create(pulls_create_params)).data
            return create_pull_res.number
      - name: Assign a user
        uses: actions/github-script@v5
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome == 'failure' && steps.get_pull_requests.outputs.result == 0 && github.event.pull_request.user.login != 'dependabot[bot]' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issues_add_assignees_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{steps.create_pull_request.outputs.result}},
              assignees: ["${{github.event.pull_request.user.login}}"],
              ...common_params
            }
            console.log("call issues.addAssignees:", issues_add_assignees_params)
            await github.rest.issues.addAssignees(issues_add_assignees_params)
      # 既にformat修正のPRがある状態で、手動でformatを修正した場合、format修正のPRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@v5
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && steps.format.outcome != 'failure' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const head_name = "fix-format-" + HEAD_REF
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "dev-hato:" + head_name,
              base: HEAD_REF,
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list, pulls_list_params)

            for(const data of pulls) {
              const pulls_update_params = {
                pull_number: data.number,
                state: "closed",
                ...common_params
              }
              console.log("call pulls.update:", pulls_update_params)
              await github.rest.pulls.update(pulls_update_params)
              const git_deleteRef_params = {
                ref: "heads/" + head_name,
                ...common_params
              }
              console.log("call git.deleteRef:", git_deleteRef_params)
              await github.rest.git.deleteRef(git_deleteRef_params)
            }
      - name: Exit
        if: ${{ steps.format.outcome == 'failure' }}
        run: exit 1

  pr-super-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{ matrix.python-version }}
          cache: pipenv
      - name: Install pipenv
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            package_name_with_version=$(grep -oE "${package_name}[^ ]+" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}
      - name: pipenv version
        run: pipenv --version
      - name: Install dependencies
        run: |
          pipenv install --dev

        # pipenvの仕様で、project直下の.venvの場合は .venv/lib/... にインストールされるが、
        # WORKON_HOMEを設定してインストール先をずらした場合は .venv/hato-bot-(hash)/lib/... にインストールされる。
        # 参考URL: https://bit.ly/2CnKOtJ
        #
        # ${GITHUB_REPOSITORY##*/}
        # GITHUB_REPOSITORYは dev-hato/hato-bot のように入るので、シェル芸で hato-bot のみ取り出している。
        # 他に持っていっても使えるようにした。
        # 参考URL: https://bit.ly/2PP4IRt
        #
        # log出力のためにfindコマンド単体も置いている
        #
        # 環境ファイルを使ってenvにsetしている
        # 参考URL: https://bit.ly/2KJhjqk
      - name: Set venv_path
        run: |
          venv_path=$(find ${{ env.WORKON_HOME }} -name "${GITHUB_REPOSITORY##*/}-*")
          echo "${venv_path}"
          echo "venv_path=${venv_path}" >> "${GITHUB_ENV}"

        # https://github.com/github/super-linter/issues/157#issuecomment-648850330
        # -v "/home/runner/work/_temp/_github_workflow":"/github/workflow"
        # ここに cp -r することで、super-linterのなかに.venvを配置できる
        # また、元ディレクトリにも残っているので、キャッシュが作られる
      - name: Move the dependencies
        run: cp -r ${{ env.venv_path }} /home/runner/work/_temp/_github_workflow/.venv

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - name: Install dependencies
        run: |
          yarn install -D

      - name: Lint files
        uses: github/super-linter@v4.8.4
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_JSCPD: false
          VALIDATE_PYTHON_ISORT: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKON_HOME: ""
          PYTHONPATH: "/github/workspace/:\
            /github/workflow/.venv/lib/python${{ matrix.python-version }}/site-packages"
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/var/cache/dotnet/tools:/usr/share/dotnet:/github/workspace/node_modules/.bin:/node_modules/.bin
