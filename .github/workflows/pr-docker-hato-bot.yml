---
name: deploy

on:
  release:
    types:
      - published
  pull_request:
  push:
    branches:
      - master
      - develop

jobs:
  deploy_docker_image:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'release' || github.repository == github.event.pull_request.head.repo.full_name
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Set .env
        run: cp .env.example .env
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=${{ github.event.release.tag_name }}' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'release' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - name: Build and push (build)
        uses: docker/bake-action@v2.1.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: build.docker-compose.yml
      - name: Build and push (main)
        uses: docker/bake-action@v2.1.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'release' }}
      - name: Build and push (build) (latest)
        uses: docker/bake-action@v2.1.0
        if: ${{ github.event_name == 'release' }}
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: build.docker-compose.yml
      - name: Build and push (main) (latest)
        uses: docker/bake-action@v2.1.0
        if: ${{ github.event_name == 'release' }}
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml

  # .python-version をDockerイメージと同期させる
  update-version-python-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      DOCKER_CONTENT_TRUST: 1
    needs: deploy_docker_image
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set .env
        run: cp .env.example .env
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker compose pull
      - name: Get Python version
        id: get_python_version
        run: |
          DOCKER_CMD="python --version 2>&1 | sed -e 's/^Python //g'"
          python_version=$(docker compose run hato-bot sh -c "${DOCKER_CMD}")
          echo "Python version:" "${python_version}"
          echo "::set-output name=python_version::${python_version}"
      - name: Update versions
        run: |
          PYTHON_VERSION="${{steps.get_python_version.outputs.python_version}}"
          echo "${PYTHON_VERSION}" > .python-version
      - uses: dev-hato/actions-diff-pr-management@v0.0.3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: fix-version-python-version
          pr-title-prefix: .python-versionを直してあげたよ！
          repo-name: ${{ github.event.pull_request.head.repo.full_name }}

  pr-docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_CONTENT_TRUST: 1
    needs: deploy_docker_image
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Set .env
        run: cp .env.example .env
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: docker compose pull
      - name: Start docker
        run: docker compose up -d --wait
      # Dockerコンテナに疎通できるかテストする
      - name: Test
        run: curl http://localhost:3000/status

  update-dockle:
    runs-on: ubuntu-latest
    env:
      DOCKER_CONTENT_TRUST: 1
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get latest dockle version
        uses: actions/github-script@v6.1.0
        id: get_latest_dockle_version
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: 'goodwithtech',
              repo: 'dockle'
            });
            return release.data.tag_name.replace('v', '');
      - run: sed -i -e 's/dockle_version=\([0-9.]*\)$/dockle_version=${{ steps.get_latest_dockle_version.outputs.result }}/g' .github/workflows/pr-docker-hato-bot.yml
      - uses: dev-hato/actions-diff-pr-management@v0.0.3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: update-dockle
          pr-title-prefix: Dockleをアップデートしてあげたよ！
          repo-name: ${{ github.event.pull_request.head.repo.full_name }}

  dockle:
    runs-on: ubuntu-latest
    needs:
      - update-dockle
      - deploy_docker_image
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Set .env
        run: cp .env.example .env
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - run: |
          dockle_version=0.4.5
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${dockle_version}/dockle_${dockle_version}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb
      - run: docker compose pull
      - run: docker compose up -d
      - run: |
          for image_name in $(docker compose images | awk 'OFS=":" {print $2,$3}' | tail -n +2); do
            cmd="dockle --exit-code 1 ${image_name}"
            echo "> ${cmd}"
            eval "${cmd}"
          done
