---
name: pr-format
# pull_requestで何かあった時に起動する
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
  push:
    branches:
      - master
permissions:
  contents: write
  pull-requests: write
jobs:
  # PRが来たらformatをかけてみて、差分があればPRを作って、エラーで落ちるjob
  pr-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          # ここでsubmodule持ってくるとdetached headにcommitして死ぬ
          # submodule: 'recursive'
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: echo "PYTHON_VERSION=$(cat .python-version)" >> "${GITHUB_ENV}"
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{env.PYTHON_VERSION }}
          cache: pipenv
      - name: Install pipenv
        id: install_pipenv
        continue-on-error: true
        run: |
          file_name=Dockerfile
          package_name=pipenv

          if [ -f ${file_name} ]
          then
            PATTERN="${package_name}[^ ]+"
            package_name_with_version=$(grep -oE "${PATTERN}" ${file_name})
          else
            package_name_with_version=${package_name}
          fi

          pip install ${package_name_with_version}

          if [ -f ${file_name} ]
          then
            new_version="$(pip list --outdated | grep pipenv || true)"
            new_version="$(echo -e "${new_version}" | awk '{print $3}')"
            if [ -n "${new_version}" ]
            then
              PATTERN_BEFORE="${package_name}[^ ]+"
              PATTERN_AFTER="${package_name}==${new_version}"
              sed -i -E "s/${PATTERN_BEFORE}/${PATTERN_AFTER}/g" ${file_name}
              pip install "${package_name}==${new_version}"
              exit 1
            fi
          fi
      - name: pipenv version
        run: pipenv --version
      - run: yq -i -I 4 -o json '._meta.requires.python_version="${{env.PYTHON_VERSION }}"' Pipfile.lock
      - name: Install dependencies
        run: pipenv install --dev
      # formatする
      # --exit-codeをつけることで、autopep8内でエラーが起きれば1、差分があれば2のエラーステータスコードが返ってくる。正常時は0が返る
      - name: Format files
        id: format
        run: |
          pipenv run autopep8 --exit-code --in-place --recursive .
          pipenv run black --config .python-black .
          pipenv run isort --sp .isort.cfg .
        continue-on-error: true
      - uses: dev-hato/actions-diff-pr-management@v1.0.7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: fix-format
          pr-title-prefix: formatが間違ってたので直してあげたよ！
          repo-name: dev-hato/hato-bot
